// Your task is to write a new function countRedun() which takes as input a pointer
// that holds the address of the start of a linked list of digits. Your function 
// should count how many redundancies can be observed in the number stored in this 
// list and return this count of redundancies. A redundancy is a digit which has 
// previously already occurred in the number. For example, in the number 39534, the 
// second '3' is a redundancy.

#include <stdio.h>
#include <stdlib.h>

struct digit {
    int num;
    struct digit *next;
};

struct digit * createDigit(int);
struct digit * append(struct digit * end, struct digit * newDigptr);
void printNumber(struct digit *);
void freeNumber(struct digit *);
struct digit *readNumber(void); 
int divisibleByThree(struct digit * start);
int changeThrees(struct digit * start);
int countRedun(struct digit * start);

int main(void) {
    struct digit *start;
    start = readNumber();

    printf("The number ");
    printNumber(start);
    printf("contains %d redundancies.\n", countRedun(start));

    freeNumber(start);

    return 0;
}
